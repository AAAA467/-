import os
import random
import logging
from fastapi import FastAPI, Request
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

CHOOSING, SOLVING = range(2)
user_state = {}

menu_keyboard = ReplyKeyboardMarkup(
    [['–ó–∞–¥–∞—á–∞ 1', '–ó–∞–¥–∞—á–∞ 2', '–ó–∞–¥–∞—á–∞ 3', '–ó–∞–¥–∞—á–∞ 4'], ['/skip', '/start']],
    resize_keyboard=True
)

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def generate_random_u_format():
    format_type = random.choice(['0-x', '0-xx', 'x-xx', 'xx-xx'])
    if format_type == '0-x':
        left = 0
        right = random.randint(1, 9)
    elif format_type == '0-xx':
        left = 0
        right = random.randint(10, 99)
    elif format_type == 'x-xx':
        left = random.randint(1, 9)
        right = random.randint(10, 99)
    else:
        left = random.randint(10, 99)
        right = random.randint(10, 99)
    return f"{left}-{right}", left, right

def parse_u_value(left, right):
    if left == 0:
        return right
    return int(f"{left}{right:02d}")

def cut_digits(number, max_digits):
    s = str(number).replace('.', '')  # –£–±–∏—Ä–∞–µ–º —Ç–æ—á–∫—É, —á—Ç–æ–± –ø–æ—Å—á–∏—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    return s[:max_digits]

def float_to_u_format(value: float) -> str:
    s = str(value)
    if '-' in s:
        s = s.replace('-', '')
    int_part, dot, frac_part = s.partition('.')
    if len(int_part) >= 2:
        return f"{int_part[:2]}-{int_part[2:4] if len(int_part) > 2 else ''}".rstrip('-')
    else:
        return f"0-{int_part.zfill(2)}"

# --- –ó–ê–î–ê–ß–ò ---

def generate_task1():
    –î–∞–ª—å–Ω–æ—Å—Ç—å = random.randint(1, 9999)
    –£–≥–ª–æ–º–µ—Ä_str, left, right = generate_random_u_format()
    –£–≥–ª–æ–º–µ—Ä_value = parse_u_value(left, right)
    –í—ã—Å–æ—Ç–∞_prime = (–î–∞–ª—å–Ω–æ—Å—Ç—å * –£–≥–ª–æ–º–µ—Ä_value) / 1000
    –í—ã—Å–æ—Ç–∞ = –í—ã—Å–æ—Ç–∞_prime * 1.05
    –í—ã—Å–æ—Ç–∞_out = str(–í—ã—Å–æ—Ç–∞_prime)[:3]
    –í—ã—Å–æ—Ç–∞_final_out = str(–í—ã—Å–æ—Ç–∞)[:3]
    return {
        'text': f'–î–∞–ª—å–Ω–æ—Å—Ç—å = {–î–∞–ª—å–Ω–æ—Å—Ç—å}, –£–≥–ª–æ–º–µ—Ä = {–£–≥–ª–æ–º–µ—Ä_str}\n–í–æ–ø—Ä–æ—Å: –í—ã—Å–æ—Ç–∞‚Ä≤ = ?, –í—ã—Å–æ—Ç–∞ = ?',
        'answer': f'{–í—ã—Å–æ—Ç–∞_out},{–í—ã—Å–æ—Ç–∞_final_out}',
        'solution': (f'–£–≥–ª–æ–º–µ—Ä = {–£–≥–ª–æ–º–µ—Ä_value}\n'
                     f'{–î–∞–ª—å–Ω–æ—Å—Ç—å} * {–£–≥–ª–æ–º–µ—Ä_value} / 1000 = {–í—ã—Å–æ—Ç–∞_prime} ‚Üí –í—ã—Å–æ—Ç–∞‚Ä≤={–í—ã—Å–æ—Ç–∞_out}\n'
                     f'{–í—ã—Å–æ—Ç–∞_prime} * 1.05 = {–í—ã—Å–æ—Ç–∞} ‚Üí –í—ã—Å–æ—Ç–∞={–í—ã—Å–æ—Ç–∞_final_out}')
    }

def generate_task2():
    –£–≥–ª–æ–º–µ—Ä_prime_str, left, right = generate_random_u_format()
    –£–≥–ª–æ–º–µ—Ä_prime_value = parse_u_value(left, right)

    –í—ã—Å–æ—Ç–∞ = random.randint(10, 500)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –î–∞–ª—å–Ω–æ—Å—Ç–∏
    –î–∞–ª—å–Ω–æ—Å—Ç—å = –í—ã—Å–æ—Ç–∞ * 1000 / –£–≥–ª–æ–º–µ—Ä_prime_value

    –£–≥–ª–æ–º–µ—Ä_value = –£–≥–ª–æ–º–µ—Ä_prime_value * 0.95
    –£–≥–ª–æ–º–µ—Ä_str = float_to_u_format(–£–≥–ª–æ–º–µ—Ä_value)

    return {
        'text': f'–î–∞–ª—å–Ω–æ—Å—Ç—å = {–î–∞–ª—å–Ω–æ—Å—Ç—å}, –í—ã—Å–æ—Ç–∞ = {–í—ã—Å–æ—Ç–∞}\n–í–æ–ø—Ä–æ—Å: –£–≥–ª–æ–º–µ—Ä‚Ä≤ = ?, –£–≥–ª–æ–º–µ—Ä = ?',
        'answer': f'{–£–≥–ª–æ–º–µ—Ä_prime_str},{–£–≥–ª–æ–º–µ—Ä_str}',
        'solution': (f'{–í—ã—Å–æ—Ç–∞} * 1000 / {–î–∞–ª—å–Ω–æ—Å—Ç—å} = {–£–≥–ª–æ–º–µ—Ä_prime_value} ‚Üí –£–≥–ª–æ–º–µ—Ä‚Ä≤={–£–≥–ª–æ–º–µ—Ä_prime_str}\n'
                     f'{–£–≥–ª–æ–º–µ—Ä_prime_value} * 0.95 = {–£–≥–ª–æ–º–µ—Ä_value} ‚Üí –£–≥–ª–æ–º–µ—Ä={–£–≥–ª–æ–º–µ—Ä_str}')
    }

def generate_task3():
    –í—ã—Å–æ—Ç–∞ = random.randint(10, 500)
    –£–≥–ª–æ–º–µ—Ä_str, left, right = generate_random_u_format()
    –£–≥–ª–æ–º–µ—Ä_value = parse_u_value(left, right)

    –î–∞–ª—å–Ω–æ—Å—Ç—å_prime = (–í—ã—Å–æ—Ç–∞ * 1000) / –£–≥–ª–æ–º–µ—Ä_value
    –î–∞–ª—å–Ω–æ—Å—Ç—å = –î–∞–ª—å–Ω–æ—Å—Ç—å_prime * 0.95

    –î–∞–ª—å–Ω–æ—Å—Ç—å_prime_out = str(–î–∞–ª—å–Ω–æ—Å—Ç—å_prime)[:4]
    –î–∞–ª—å–Ω–æ—Å—Ç—å_out = str(–î–∞–ª—å–Ω–æ—Å—Ç—å)[:4]

    return {
        'text': f'–í—ã—Å–æ—Ç–∞ = {–í—ã—Å–æ—Ç–∞}, –£–≥–ª–æ–º–µ—Ä = {–£–≥–ª–æ–º–µ—Ä_str}\n–í–æ–ø—Ä–æ—Å: –î–∞–ª—å–Ω–æ—Å—Ç—å‚Ä≤ = ?, –î–∞–ª—å–Ω–æ—Å—Ç—å = ?',
        'answer': f'{–î–∞–ª—å–Ω–æ—Å—Ç—å_prime_out},{–î–∞–ª—å–Ω–æ—Å—Ç—å_out}',
        'solution': (f'–£–≥–ª–æ–º–µ—Ä = {–£–≥–ª–æ–º–µ—Ä_value}\n'
                     f'{–í—ã—Å–æ—Ç–∞} * 1000 / {–£–≥–ª–æ–º–µ—Ä_value} = {–î–∞–ª—å–Ω–æ—Å—Ç—å_prime} ‚Üí –î–∞–ª—å–Ω–æ—Å—Ç—å‚Ä≤={–î–∞–ª—å–Ω–æ—Å—Ç—å_prime_out}\n'
                     f'{–î–∞–ª—å–Ω–æ—Å—Ç—å_prime} * 0.95 = {–î–∞–ª—å–Ω–æ—Å—Ç—å} ‚Üí –î–∞–ª—å–Ω–æ—Å—Ç—å={–î–∞–ª—å–Ω–æ—Å—Ç—å_out}')
    }

def generate_task4():
    –∞–∑–∏–º—É—Ç_—Ü–µ–ª–∏ = random.randint(1, 359)
    –∞–∑–∏–º—É—Ç_–æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞ = random.randint(1, 359)
    —á–∏—Å–ª–æ–≤–æ–π_–∫—É—Ä—Å = –∞–∑–∏–º—É—Ç_—Ü–µ–ª–∏ - –∞–∑–∏–º—É—Ç_–æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞
    if —á–∏—Å–ª–æ–≤–æ–π_–∫—É—Ä—Å < 0:
        —á–∏—Å–ª–æ–≤–æ–π_–∫—É—Ä—Å += 360
    return {
        'text': f'–ê–∑–∏–º—É—Ç —Ü–µ–ª–∏ = {–∞–∑–∏–º—É—Ç_—Ü–µ–ª–∏}, –ê–∑–∏–º—É—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞ = {–∞–∑–∏–º—É—Ç_–æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞}\n–í–æ–ø—Ä–æ—Å: –ß–∏—Å–ª–æ–≤–æ–π –∫—É—Ä—Å —Ü–µ–ª–∏ = ?',
        'answer': str(—á–∏—Å–ª–æ–≤–æ–π_–∫—É—Ä—Å),
        'solution': f'–ß–∏—Å–ª–æ–≤–æ–π –∫—É—Ä—Å —Ü–µ–ª–∏ = {–∞–∑–∏–º—É—Ç_—Ü–µ–ª–∏} - {–∞–∑–∏–º—É—Ç_–æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞} = {—á–∏—Å–ª–æ–≤–æ–π_–∫—É—Ä—Å}'
    }

# --- –•–ï–ù–î–õ–ï–†–´ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–Ω—ã—Ö –∑–∞–¥–∞—á.\n\n"
        "–í—ã–±–∏—Ä–∞–π –æ–¥–Ω—É –∏–∑ –∑–∞–¥–∞—á –Ω–∏–∂–µ:\n"
        "üìå –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: –í—ã—Å–æ—Ç–∞‚Ä≤,–í—ã—Å–æ—Ç–∞ –∏–ª–∏ –£–≥–ª–æ–º–µ—Ä‚Ä≤,–£–≥–ª–æ–º–µ—Ä –∏–ª–∏ –î–∞–ª—å–Ω–æ—Å—Ç—å‚Ä≤,–î–∞–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ –ß–∏—Å–ª–æ–≤–æ–π –∫—É—Ä—Å (–¥–ª—è –∑–∞–¥–∞—á–∏ 4)\n"
        "üìå –ü—Ä–∏–º–µ—Ä: 112,118 –∏–ª–∏ 0‚Äì54,0‚Äì51 –∏–ª–∏ 3010,2859 –∏–ª–∏ 8\n"
        "üìå –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n"
        "‚Ä¢ –í—ã—Å–æ—Ç–∞ –∏ –í—ã—Å–æ—Ç–∞‚Ä≤ ‚Äî –º–∞–∫—Å–∏–º—É–º 3 —Ü–∏—Ñ—Ä—ã\n"
        "‚Ä¢ –î–∞–ª—å–Ω–æ—Å—Ç—å –∏ –î–∞–ª—å–Ω–æ—Å—Ç—å‚Ä≤ ‚Äî –º–∞–∫—Å–∏–º—É–º 4 —Ü–∏—Ñ—Ä—ã\n"
        "‚Ä¢ –í—ã—Å–æ—Ç–∞ –≤ –∑–∞–¥–∞—á–∞—Ö –æ—Ç 10 –¥–æ 500\n"
        "üõ† –ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /skip ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç –∏ —Ä–µ—à–µ–Ω–∏–µ\n"
        "‚Ä¢ /start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n",
        reply_markup=menu_keyboard
    )
    return CHOOSING

async def choose_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if text == '–ó–∞–¥–∞—á–∞ 1':
        task = generate_task1()
    elif text == '–ó–∞–¥–∞—á–∞ 2':
        task = generate_task2()
    elif text == '–ó–∞–¥–∞—á–∞ 3':
        task = generate_task3()
    elif text == '–ó–∞–¥–∞—á–∞ 4':
        task = generate_task4()
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –∏–∑ –º–µ–Ω—é.")
        return CHOOSING

    user_state[user_id] = task
    await update.message.reply_text(task['text'])
    return SOLVING

async def answer_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    answer = update.message.text.strip()

    if user_id not in user_state:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –∫–æ–º–∞–Ω–¥–æ–π /start")
        return CHOOSING

    task = user_state[user_id]
    correct = task['answer']

    if answer == correct:
        await update.message.reply_text("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü!\n/start –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏", reply_markup=menu_keyboard)
    else:
        await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\n{correct}\n\n–†–µ—à–µ–Ω–∏–µ:\n{task['solution']}", reply_markup=menu_keyboard)

    del user_state[user_id]
    return CHOOSING

async def skip_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_state:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É /start")
        return CHOOSING
    task = user_state[user_id]
    await update.message.reply_text(f"–û—Ç–≤–µ—Ç: {task['answer']}\n\n–†–µ—à–µ–Ω–∏–µ:\n{task['solution']}", reply_markup=menu_keyboard)
    del user_state[user_id]
    return CHOOSING

# --- FastAPI —Å–µ—Ä–≤–µ—Ä –∏ webhook ---

app = FastAPI()
WEBHOOK_PATH = "/webhook"

application = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()

@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, application.bot)
    await application.update_queue.put(update)
    return {"ok": True}

application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.Regex("^–ó–∞–¥–∞—á–∞ [1-4]$"), choose_task))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, answer_handler))
application.add_handler(CommandHandler("skip", skip_handler))

if __name__ == "__main__":
    import uvicorn
    port = int(os.getenv("PORT", 8080))
    uvicorn.run("main:app", host="0.0.0.0", port=port)
