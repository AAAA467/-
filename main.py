import logging
import random
import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º keep_alive
from keep_alive import keep_alive

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

CHOOSING, SOLVING = range(2)
user_state = {}

menu_keyboard = ReplyKeyboardMarkup(
    [['–ó–∞–¥–∞—á–∞ 1', '–ó–∞–¥–∞—á–∞ 2', '–ó–∞–¥–∞—á–∞ 3'], ['/skip', '/start']],
    resize_keyboard=True
)

# --- –§–£–ù–ö–¶–ò–ò –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–î–ê–ß ---

def generate_random_u_format():
    format_type = random.choice(['0-x', '0-xx', 'x-xx', 'xx-xx'])
    if format_type == '0-x':
        left = 0
        right = random.randint(1, 9)
    elif format_type == '0-xx':
        left = 0
        right = random.randint(10, 99)
    elif format_type == 'x-xx':
        left = random.randint(1, 9)
        right = random.randint(10, 99)
    else:
        left = random.randint(10, 99)
        right = random.randint(10, 99)
    return f"{left}-{right}", left, right

def parse_u_value(left, right):
    if left == 0:
        return right
    return int(f"{left}{right:02d}")

def u_number_to_format(n):
    i = int(n)
    s = str(i)
    if len(s) <= 2:
        return f"0-{s}"
    elif len(s) == 3:
        return f"{s[0]}-{s[1:]}"
    else:
        return f"{s[:2]}-{s[2:]}"

def cut_digits(number, max_digits):
    return str(int(number))[:max_digits]

def generate_task1():
    D = random.randint(1, 9999)
    U_str, left, right = generate_random_u_format()
    U_value = parse_u_value(left, right)
    V_prime_raw = (D * U_value) / 1000
    V = V_prime_raw * 1.05
    V_prime_out = cut_digits(V_prime_raw, 3)
    V_out = cut_digits(V, 3)
    return {
        'text': f'–î = {D}, –£ = {U_str}\n–í–æ–ø—Ä–æ—Å: –í‚Ä≤ = ?, –í = ?',
        'answer': f'{V_prime_out},{V_out}',
        'solution': f'–£ = {U_value}\n{D} * {U_value} / 1000 = {V_prime_raw:.6f} ‚Üí –í‚Ä≤={V_prime_out}\n'
                    f'{V_prime_raw:.6f} * 1.05 = {V:.6f} ‚Üí –í={V_out}'
    }

def generate_task2():
    format_type = random.choice(['0-xx', 'x-xx', 'xx-xx'])

    if format_type == '0-xx':
        left = 0
        right = random.randint(10, 99)
    elif format_type == 'x-xx':
        left = random.randint(1, 9)
        right = random.randint(10, 99)
    else:
        left = random.randint(10, 99)
        right = random.randint(10, 99)

    U_prime_str = f"{left}-{right}"
    U_prime_value = parse_u_value(left, right)

    # ‚ùó –£–±–∏—Ä–∞–µ–º –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ int
    U_value = U_prime_value * 0.95
    U_str = u_number_to_format(U_value)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ–∫—Ä—É–≥–ª—è–µ–º –¢–û–õ–¨–ö–û –∑–¥–µ—Å—å

    D = random.randint(1, 9999)
    V = int(U_prime_value * D / 1000)

    return {
        'text': f'–î = {D}, –í = {V}\n–í–æ–ø—Ä–æ—Å: –£‚Ä≤ = ?, –£ = ?',
        'answer': f'{U_prime_str},{U_str}',
        'solution': f'{V} * 1000 / {D} = {U_prime_value:.6f} ‚Üí –£‚Ä≤={U_prime_str}\n'
                    f'{U_prime_value:.6f} * 0.95 = {U_value:.6f} ‚Üí –£={U_str}'
    }

def generate_task3():
    V = random.randint(1, 999)
    U_str, left, right = generate_random_u_format()
    U_value = parse_u_value(left, right)
    D_prime = (V * 1000) / U_value
    D = D_prime * 0.95
    D_prime_out = cut_digits(D_prime, 4)
    D_out = cut_digits(D, 4)
    return {
        'text': f'–í = {V}, –£ = {U_str}\n–í–æ–ø—Ä–æ—Å: –î‚Ä≤ = ?, –î = ?',
        'answer': f'{D_prime_out},{D_out}',
        'solution': f'–£ = {U_value}\n{V} * 1000 / {U_value} = {D_prime:.6f} ‚Üí –î‚Ä≤={D_prime_out}\n'
                    f'{D_prime:.6f} * 0.95 = {D:.6f} ‚Üí –î={D_out}'
    }

# --- –•–ï–ù–î–õ–ï–†–´ –¢–ï–õ–ï–ì–†–ê–ú ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–Ω—ã—Ö –∑–∞–¥–∞—á.\n\n"
        "–í—ã–±–∏—Ä–∞–π –æ–¥–Ω—É –∏–∑ –∑–∞–¥–∞—á –Ω–∏–∂–µ:\n"
        "üìå –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: –í‚Ä≤,–í –∏–ª–∏ –£‚Ä≤,–£ –∏–ª–∏ –î‚Ä≤,–î (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)\n"
        "üìå –ü—Ä–∏–º–µ—Ä: 112,118 –∏–ª–∏ 0‚Äì54,0‚Äì51 –∏–ª–∏ 3010,2859\n"
        "üìå –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n"
        "‚Ä¢ –í –∏ –í‚Ä≤ ‚Äî –º–∞–∫—Å–∏–º—É–º 3 —Ü–∏—Ñ—Ä—ã\n"
        "‚Ä¢ –î –∏ –î‚Ä≤ ‚Äî –º–∞–∫—Å–∏–º—É–º 4 —Ü–∏—Ñ—Ä—ã\n"
        "üõ† –ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /skip ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç –∏ —Ä–µ—à–µ–Ω–∏–µ\n"
        "‚Ä¢ /start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n",
        reply_markup=menu_keyboard
    )
    return CHOOSING

async def choose_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    task_text = update.message.text

    if task_text == '–ó–∞–¥–∞—á–∞ 1':
        task = generate_task1()
    elif task_text == '–ó–∞–¥–∞—á–∞ 2':
        task = generate_task2()
    elif task_text == '–ó–∞–¥–∞—á–∞ 3':
        task = generate_task3()
    else:
        return CHOOSING

    user_state[user_id] = task
    await update.message.reply_text(
        f"üìò –£—Å–ª–æ–≤–∏–µ:\n{task['text']}\n\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –∏–ª–∏ /skip",
        reply_markup=menu_keyboard
    )
    return SOLVING

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    task = user_state.get(user_id)

    if not task:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏. –í–≤–µ–¥–∏—Ç–µ /start.")
        return CHOOSING

    user_input = update.message.text.replace(" ", "").lower()
    correct = task['answer'].replace(" ", "").lower()

    if user_input == correct:
        await update.message.reply_text("‚úÖ –í–µ—Ä–Ω–æ!")
    else:
        await update.message.reply_text(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ.\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {task['answer']}\n\nüìò –†–µ—à–µ–Ω–∏–µ:\n{task['solution']}"
        )

    await update.message.reply_text("üîÅ –•–æ—Ç–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É? –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ:", reply_markup=menu_keyboard)
    return CHOOSING

async def skip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    task = user_state.get(user_id)

    if not task:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏. –í–≤–µ–¥–∏—Ç–µ /start.")
        return CHOOSING

    await update.message.reply_text(
        f"‚úÖ –û—Ç–≤–µ—Ç: {task['answer']}\n\nüìò –†–µ—à–µ–Ω–∏–µ:\n{task['solution']}"
    )
    await update.message.reply_text("üîÅ –•–æ—Ç–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É? –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ:", reply_markup=menu_keyboard)
    return CHOOSING

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö ---

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", exc_info=context.error)

# --- MAIN ---

def main():
    TOKEN = os.environ.get("BOT_TOKEN")
    if not TOKEN:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Replit!")
        return

    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING: [
                MessageHandler(filters.Regex("^(–ó–∞–¥–∞—á–∞ 1|–ó–∞–¥–∞—á–∞ 2|–ó–∞–¥–∞—á–∞ 3)$"), choose_task),
            ],
            SOLVING: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer),
                CommandHandler("skip", skip),
            ],
        },
        fallbacks=[CommandHandler("start", start)],
    )

    app.add_handler(conv_handler)
    app.add_error_handler(error_handler)

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

    keep_alive()
    app.run_polling()

if __name__ == "__main__":
    main()

