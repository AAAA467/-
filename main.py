import logging
import random
import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)

from keep_alive import keep_alive

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

CHOOSING, SOLVING = range(2)
user_state = {}

menu_keyboard = ReplyKeyboardMarkup(
    [['–ó–∞–¥–∞—á–∞ 1', '–ó–∞–¥–∞—á–∞ 2', '–ó–∞–¥–∞—á–∞ 3', '–ó–∞–¥–∞—á–∞ 4'], ['/skip', '/start']],
    resize_keyboard=True
)

def generate_random_u_format():
    format_type = random.choice(['0-x', '0-xx', 'x-xx', 'xx-xx'])
    if format_type == '0-x':
        left = 0
        right = random.randint(1, 9)
    elif format_type == '0-xx':
        left = 0
        right = random.randint(10, 99)
    elif format_type == 'x-xx':
        left = random.randint(1, 9)
        right = random.randint(10, 99)
    else:
        left = random.randint(10, 99)
        right = random.randint(10, 99)
    return f"{left}-{right}", left, right

def parse_u_value(left, right):
    if left == 0:
        return right
    return float(f"{left}{right:02d}")

def u_number_to_format(n):
    i = int(n)
    s = str(i)
    if len(s) <= 2:
        return f"0-{s}"
    elif len(s) == 3:
        return f"{s[0]}-{s[1:]}"
    else:
        return f"{s[:2]}-{s[2:]}"

def cut_digits(number, max_digits):
    return str(number)[:max_digits]

def generate_task1():
    distance = random.randint(1, 9999)
    u_str, left, right = generate_random_u_format()
    u_value = parse_u_value(left, right)
    v_prime_raw = (distance * u_value) / 1000
    v = v_prime_raw * 1.05
    v_prime_out = cut_digits(v_prime_raw, 3)
    v_out = cut_digits(v, 3)
    return {
        'text': f'–î–∞–ª—å–Ω–æ—Å—Ç—å = {distance}, –£–≥–ª–æ–º–µ—Ä = {u_str}\n–í–æ–ø—Ä–æ—Å: –í—ã—Å–æ—Ç–∞‚Ä≤ = ?, –í—ã—Å–æ—Ç–∞ = ?',
        'answer': f'{v_prime_out},{v_out}',
        'solution': f'–£–≥–ª–æ–º–µ—Ä = {u_value}\n{distance} * {u_value} / 1000 = {v_prime_raw:.6f} ‚Üí –í—ã—Å–æ—Ç–∞‚Ä≤={v_prime_out}\n'
                    f'{v_prime_raw:.6f} * 1.05 = {v:.6f} ‚Üí –í—ã—Å–æ—Ç–∞={v_out}'
    }

def generate_task2():
    format_type = random.choice(['0-xx', 'x-xx', 'xx-xx'])
    if format_type == '0-xx':
        left = 0
        right = random.randint(10, 99)
    elif format_type == 'x-xx':
        left = random.randint(1, 9)
        right = random.randint(10, 99)
    else:
        left = random.randint(10, 99)
        right = random.randint(10, 99)

    u_prime_str = f"{left}-{right}"
    u_prime_value = float(f"{left}{right:02d}")
    u_value = u_prime_value * 0.95
    u_str = u_number_to_format(u_value)

    distance = random.randint(1, 9999)
    v = u_prime_value * distance / 1000
    if v < 10 or v > 500:
        return generate_task2()

    return {
        'text': f'–î–∞–ª—å–Ω–æ—Å—Ç—å = {distance}, –í—ã—Å–æ—Ç–∞ = {int(v)}\n–í–æ–ø—Ä–æ—Å: –£–≥–ª–æ–º–µ—Ä‚Ä≤ = ?, –£–≥–ª–æ–º–µ—Ä = ?',
        'answer': f'{u_prime_str},{u_str}',
        'solution': f'{v:.6f} * 1000 / {distance} = {u_prime_value:.15f} ‚Üí –£–≥–ª–æ–º–µ—Ä‚Ä≤={u_prime_str}\n'
                    f'{u_prime_value:.15f} * 0.95 = {u_value:.15f} ‚Üí –£–≥–ª–æ–º–µ—Ä={u_str}'
    }

def generate_task3():
    v = random.randint(10, 500)
    u_str, left, right = generate_random_u_format()
    u_value = parse_u_value(left, right)
    distance_prime = (v * 1000) / u_value
    distance = distance_prime * 0.95
    distance_prime_out = cut_digits(distance_prime, 4)
    distance_out = cut_digits(distance, 4)
    return {
        'text': f'–í—ã—Å–æ—Ç–∞ = {v}, –£–≥–ª–æ–º–µ—Ä = {u_str}\n–í–æ–ø—Ä–æ—Å: –î–∞–ª—å–Ω–æ—Å—Ç—å‚Ä≤ = ?, –î–∞–ª—å–Ω–æ—Å—Ç—å = ?',
        'answer': f'{distance_prime_out},{distance_out}',
        'solution': f'–£–≥–ª–æ–º–µ—Ä = {u_value}\n{v} * 1000 / {u_value} = {distance_prime:.6f} ‚Üí –î–∞–ª—å–Ω–æ—Å—Ç—å‚Ä≤={distance_prime_out}\n'
                    f'{distance_prime:.6f} * 0.95 = {distance:.6f} ‚Üí –î–∞–ª—å–Ω–æ—Å—Ç—å={distance_out}'
    }

def generate_task4():
    az_target = random.randint(1, 359)
    az_reference = random.randint(1, 359)
    raw_course = az_target - az_reference
    if raw_course < 0:
        raw_course += 360
    return {
        'text': f'–ê–∑–∏–º—É—Ç —Ü–µ–ª–∏ = {az_target}, –ê–∑–∏–º—É—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞ = {az_reference}\n–í–æ–ø—Ä–æ—Å: –ß–∏—Å–ª–æ–≤–æ–π –∫—É—Ä—Å —Ü–µ–ª–∏ = ?',
        'answer': f'{raw_course}',
        'solution': f'{az_target} - {az_reference} = {az_target - az_reference} ‚Üí –ß–∏—Å–ª–æ–≤–æ–π –∫—É—Ä—Å —Ü–µ–ª–∏ = {raw_course}'
    }

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–Ω—ã—Ö –∑–∞–¥–∞—á.\n\n"
        "–í—ã–±–∏—Ä–∞–π –æ–¥–Ω—É –∏–∑ –∑–∞–¥–∞—á –Ω–∏–∂–µ:\n"
        "üìå –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: –í—ã—Å–æ—Ç–∞‚Ä≤,–í—ã—Å–æ—Ç–∞ –∏–ª–∏ –£–≥–ª–æ–º–µ—Ä‚Ä≤,–£–≥–ª–æ–º–µ—Ä –∏–ª–∏ –î–∞–ª—å–Ω–æ—Å—Ç—å‚Ä≤,–î–∞–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ –ß–∏—Å–ª–æ–≤–æ–π –∫—É—Ä—Å —Ü–µ–ª–∏\n"
        "üìå –ü—Ä–∏–º–µ—Ä: 112,118 –∏–ª–∏ 0‚Äì54,0‚Äì51 –∏–ª–∏ 3010,2859\n"
        "üìå –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n"
        "‚Ä¢ –í—ã—Å–æ—Ç–∞ –∏ –í—ã—Å–æ—Ç–∞‚Ä≤ ‚Äî –º–∞–∫—Å–∏–º—É–º 3 —Ü–∏—Ñ—Ä—ã\n"
        "‚Ä¢ –î–∞–ª—å–Ω–æ—Å—Ç—å –∏ –î–∞–ª—å–Ω–æ—Å—Ç—å‚Ä≤ ‚Äî –º–∞–∫—Å–∏–º—É–º 4 —Ü–∏—Ñ—Ä—ã\n"
        "üõ† –ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /skip ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç –∏ —Ä–µ—à–µ–Ω–∏–µ\n"
        "‚Ä¢ /start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n",
        reply_markup=menu_keyboard
    )
    return CHOOSING

async def choose_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    task_text = update.message.text

    if task_text == '–ó–∞–¥–∞—á–∞ 1':
        task = generate_task1()
    elif task_text == '–ó–∞–¥–∞—á–∞ 2':
        task = generate_task2()
    elif task_text == '–ó–∞–¥–∞—á–∞ 3':
        task = generate_task3()
    elif task_text == '–ó–∞–¥–∞—á–∞ 4':
        task = generate_task4()
    else:
        return CHOOSING

    user_state[user_id] = task
    await update.message.reply_text(
        f"üìò –£—Å–ª–æ–≤–∏–µ:\n{task['text']}\n\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –∏–ª–∏ /skip",
        reply_markup=menu_keyboard
    )
    return SOLVING

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    task = user_state.get(user_id)

    if not task:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏. –í–≤–µ–¥–∏—Ç–µ /start.")
        return CHOOSING

    user_input = update.message.text.replace(" ", "").lower()
    correct = task['answer'].replace(" ", "").lower()

    if user_input == correct:
        await update.message.reply_text("‚úÖ –í–µ—Ä–Ω–æ!")
    else:
        await update.message.reply_text(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ.\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {task['answer']}\n\nüìò –†–µ—à–µ–Ω–∏–µ:\n{task['solution']}"
        )

    await update.message.reply_text("üîÅ –•–æ—Ç–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É? –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ:", reply_markup=menu_keyboard)
    return CHOOSING

async def skip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    task = user_state.get(user_id)

    if not task:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏. –í–≤–µ–¥–∏—Ç–µ /start.")
        return CHOOSING

    await update.message.reply_text(
        f"‚úÖ –û—Ç–≤–µ—Ç: {task['answer']}\n\nüìò –†–µ—à–µ–Ω–∏–µ:\n{task['solution']}"
    )
    await update.message.reply_text("üîÅ –•–æ—Ç–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É? –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ:", reply_markup=menu_keyboard)
    return CHOOSING

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", exc_info=context.error)

def main():
    TOKEN = os.environ.get("BOT_TOKEN")
    if not TOKEN:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!")
        return

    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING: [
                MessageHandler(filters.Regex("^(–ó–∞–¥–∞—á–∞ 1|–ó–∞–¥–∞—á–∞ 2|–ó–∞–¥–∞—á–∞ 3|–ó–∞–¥–∞—á–∞ 4)$"), choose_task),
            ],
            SOLVING: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer),
                CommandHandler("skip", skip),
            ],
        },
        fallbacks=[CommandHandler("start", start)],
    )

    app.add_handler(conv_handler)
    app.add_error_handler(error_handler)

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

    keep_alive()
    app.run_polling()

if __name__ == "__main__":
    main()
