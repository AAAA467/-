import logging
import random
import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º keep_alive
from keep_alive import keep_alive

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

CHOOSING, SOLVING = range(2)
user_state = {}

menu_keyboard = ReplyKeyboardMarkup(
    [['–ó–∞–¥–∞—á–∞ 1', '–ó–∞–¥–∞—á–∞ 2', '–ó–∞–¥–∞—á–∞ 3', '–ó–∞–¥–∞—á–∞ 4'], ['/skip', '/start']],
    resize_keyboard=True
)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def generate_random_u_format():
    format_type = random.choice(['0-x', '0-xx', 'x-xx', 'xx-xx'])
    if format_type == '0-x':
        left = 0
        right = random.randint(1, 9)
    elif format_type == '0-xx':
        left = 0
        right = random.randint(10, 99)
    elif format_type == 'x-xx':
        left = random.randint(1, 9)
        right = random.randint(10, 99)
    else:
        left = random.randint(10, 99)
        right = random.randint(10, 99)
    return f"{left}-{right}", left, right

def parse_u_value(left, right):
    if left == 0:
        return right
    return int(f"{left}{right:02d}")

def u_number_to_format(n):
    i = int(n)
    s = str(i)
    if len(s) <= 2:
        return f"0-{s}"
    elif len(s) == 3:
        return f"{s[0]}-{s[1:]}"
    else:
        return f"{s[:2]}-{s[2:]}"

def cut_digits(number, max_digits):
    s = str(number)
    if '.' in s:
        s = s.split('.')[0]  # –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Ü–µ–ª—É—é —á–∞—Å—Ç—å –±–µ–∑ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –∏ —Ç–æ—á–∫–∏
    return s[:max_digits]

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á ---

def generate_task1():
    –î–∞–ª—å–Ω–æ—Å—Ç—å = random.randint(1, 9999)
    –£–≥–ª–æ–º–µ—Ä_str, left, right = generate_random_u_format()
    –£–≥–ª–æ–º–µ—Ä_value = parse_u_value(left, right)
    –í—ã—Å–æ—Ç–∞_prime_raw = (–î–∞–ª—å–Ω–æ—Å—Ç—å * –£–≥–ª–æ–º–µ—Ä_value) / 1000
    –í—ã—Å–æ—Ç–∞ = –í—ã—Å–æ—Ç–∞_prime_raw * 1.05
    –í—ã—Å–æ—Ç–∞_prime_out = cut_digits(–í—ã—Å–æ—Ç–∞_prime_raw, 3)
    –í—ã—Å–æ—Ç–∞_out = cut_digits(–í—ã—Å–æ—Ç–∞, 3)
    return {
        'text': f'–î–∞–ª—å–Ω–æ—Å—Ç—å = {–î–∞–ª—å–Ω–æ—Å—Ç—å}, –£–≥–ª–æ–º–µ—Ä = {–£–≥–ª–æ–º–µ—Ä_str}\n–í–æ–ø—Ä–æ—Å: –í—ã—Å–æ—Ç–∞‚Ä≤ = ?, –í—ã—Å–æ—Ç–∞ = ?',
        'answer': f'{–í—ã—Å–æ—Ç–∞_prime_out},{–í—ã—Å–æ—Ç–∞_out}',
        'solution': f'–£–≥–ª–æ–º–µ—Ä = {–£–≥–ª–æ–º–µ—Ä_value}\n{–î–∞–ª—å–Ω–æ—Å—Ç—å} * {–£–≥–ª–æ–º–µ—Ä_value} / 1000 = {–í—ã—Å–æ—Ç–∞_prime_raw:.6f} ‚Üí –í—ã—Å–æ—Ç–∞‚Ä≤={–í—ã—Å–æ—Ç–∞_prime_out}\n'
                    f'{–í—ã—Å–æ—Ç–∞_prime_raw:.6f} * 1.05 = {–í—ã—Å–æ—Ç–∞:.6f} ‚Üí –í—ã—Å–æ—Ç–∞={–í—ã—Å–æ—Ç–∞_out}'
    }

def generate_task2():
    format_type = random.choice(['0-xx', 'x-xx', 'xx-xx'])

    if format_type == '0-xx':
        left = 0
        right = random.randint(10, 99)
    elif format_type == 'x-xx':
        left = random.randint(1, 9)
        right = random.randint(10, 99)
    else:
        left = random.randint(10, 99)
        right = random.randint(10, 99)

    –£–≥–ª–æ–º–µ—Ä_prime_str = f"{left}-{right}"
    –£–≥–ª–æ–º–µ—Ä_prime_value = parse_u_value(left, right)
    –£–≥–ª–æ–º–µ—Ä_value = –£–≥–ª–æ–º–µ—Ä_prime_value * 0.95  # –æ—Å—Ç–∞–≤–ª—è–µ–º float –±–µ–∑ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
    –£–≥–ª–æ–º–µ—Ä_str = u_number_to_format(int(–£–≥–ª–æ–º–µ—Ä_value))

    –î–∞–ª—å–Ω–æ—Å—Ç—å = random.randint(1, 9999)
    –í—ã—Å–æ—Ç–∞ = random.randint(10, 500)  # –í—ã—Å–æ—Ç–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 10..500

    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –í—ã—Å–æ—Ç–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –£–≥–ª–æ–º–µ—Ä_prime_value –∏ –î–∞–ª—å–Ω–æ—Å—Ç—å
    # –ü–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º –í—ã—Å–æ—Ç–∞ –∏—Å—Ö–æ–¥—è –∏–∑ —Ñ–æ—Ä–º—É–ª—ã, —á—Ç–æ–±—ã –≤—ã—Å—á–∏—Ç–∞—Ç—å –£–≥–ª–æ–º–µ—Ä_prime_value –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:
    –í—ã—Å–æ—Ç–∞ = –£–≥–ª–æ–º–µ—Ä_prime_value * –î–∞–ª—å–Ω–æ—Å—Ç—å / 1000

    return {
        'text': f'–î–∞–ª—å–Ω–æ—Å—Ç—å = {–î–∞–ª—å–Ω–æ—Å—Ç—å}, –í—ã—Å–æ—Ç–∞ = {int(–í—ã—Å–æ—Ç–∞)}\n–í–æ–ø—Ä–æ—Å: –£–≥–ª–æ–º–µ—Ä‚Ä≤ = ?, –£–≥–ª–æ–º–µ—Ä = ?',
        'answer': f'{–£–≥–ª–æ–º–µ—Ä_prime_str},{–£–≥–ª–æ–º–µ—Ä_str}',
        'solution': f'{int(–í—ã—Å–æ—Ç–∞)} * 1000 / {–î–∞–ª—å–Ω–æ—Å—Ç—å} = {–£–≥–ª–æ–º–µ—Ä_prime_value:.6f} ‚Üí –£–≥–ª–æ–º–µ—Ä‚Ä≤={–£–≥–ª–æ–º–µ—Ä_prime_str}\n'
                    f'{–£–≥–ª–æ–º–µ—Ä_prime_value:.6f} * 0.95 = {–£–≥–ª–æ–º–µ—Ä_value:.6f} ‚Üí –£–≥–ª–æ–º–µ—Ä={–£–≥–ª–æ–º–µ—Ä_str}'
    }

def generate_task3():
    –í—ã—Å–æ—Ç–∞ = random.randint(10, 500)
    –£–≥–ª–æ–º–µ—Ä_str, left, right = generate_random_u_format()
    –£–≥–ª–æ–º–µ—Ä_value = parse_u_value(left, right)
    –î–∞–ª—å–Ω–æ—Å—Ç—å_prime = (–í—ã—Å–æ—Ç–∞ * 1000) / –£–≥–ª–æ–º–µ—Ä_value
    –î–∞–ª—å–Ω–æ—Å—Ç—å = –î–∞–ª—å–Ω–æ—Å—Ç—å_prime * 0.95
    –î–∞–ª—å–Ω–æ—Å—Ç—å_prime_out = cut_digits(–î–∞–ª—å–Ω–æ—Å—Ç—å_prime, 4)
    –î–∞–ª—å–Ω–æ—Å—Ç—å_out = cut_digits(–î–∞–ª—å–Ω–æ—Å—Ç—å, 4)
    return {
        'text': f'–í—ã—Å–æ—Ç–∞ = {–í—ã—Å–æ—Ç–∞}, –£–≥–ª–æ–º–µ—Ä = {–£–≥–ª–æ–º–µ—Ä_str}\n–í–æ–ø—Ä–æ—Å: –î–∞–ª—å–Ω–æ—Å—Ç—å‚Ä≤ = ?, –î–∞–ª—å–Ω–æ—Å—Ç—å = ?',
        'answer': f'{–î–∞–ª—å–Ω–æ—Å—Ç—å_prime_out},{–î–∞–ª—å–Ω–æ—Å—Ç—å_out}',
        'solution': f'–£–≥–ª–æ–º–µ—Ä = {–£–≥–ª–æ–º–µ—Ä_value}\n{–í—ã—Å–æ—Ç–∞} * 1000 / {–£–≥–ª–æ–º–µ—Ä_value} = {–î–∞–ª—å–Ω–æ—Å—Ç—å_prime:.6f} ‚Üí –î–∞–ª—å–Ω–æ—Å—Ç—å‚Ä≤={–î–∞–ª—å–Ω–æ—Å—Ç—å_prime_out}\n'
                    f'{–î–∞–ª—å–Ω–æ—Å—Ç—å_prime:.6f} * 0.95 = {–î–∞–ª—å–Ω–æ—Å—Ç—å:.6f} ‚Üí –î–∞–ª—å–Ω–æ—Å—Ç—å={–î–∞–ª—å–Ω–æ—Å—Ç—å_out}'
    }

def generate_task4():
    –∞–∑–∏–º—É—Ç_—Ü–µ–ª–∏ = random.randint(1, 359)
    –∞–∑–∏–º—É—Ç_–æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞ = random.randint(1, 359)
    —á–∏—Å–ª–æ–≤–æ–π_–∫—É—Ä—Å = –∞–∑–∏–º—É—Ç_—Ü–µ–ª–∏ - –∞–∑–∏–º—É—Ç_–æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞
    if —á–∏—Å–ª–æ–≤–æ–π_–∫—É—Ä—Å < 0:
        —á–∏—Å–ª–æ–≤–æ–π_–∫—É—Ä—Å += 360
    return {
        'text': f'–ê–∑–∏–º—É—Ç —Ü–µ–ª–∏ = {–∞–∑–∏–º—É—Ç_—Ü–µ–ª–∏}, –ê–∑–∏–º—É—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞ = {–∞–∑–∏–º—É—Ç_–æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞}\n–í–æ–ø—Ä–æ—Å: –ß–∏—Å–ª–æ–≤–æ–π –∫—É—Ä—Å —Ü–µ–ª–∏ = ?',
        'answer': f'{—á–∏—Å–ª–æ–≤–æ–π_–∫—É—Ä—Å}',
        'solution': f'{–∞–∑–∏–º—É—Ç_—Ü–µ–ª–∏} - {–∞–∑–∏–º—É—Ç_–æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞} = {—á–∏—Å–ª–æ–≤–æ–π_–∫—É—Ä—Å}'
    }

# --- –•–ï–ù–î–õ–ï–†–´ –¢–ï–õ–ï–ì–†–ê–ú ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–Ω—ã—Ö –∑–∞–¥–∞—á.\n\n"
        "–í—ã–±–∏—Ä–∞–π –æ–¥–Ω—É –∏–∑ –∑–∞–¥–∞—á –Ω–∏–∂–µ:\n"
        "üìå –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: –í—ã—Å–æ—Ç–∞‚Ä≤,–í—ã—Å–æ—Ç–∞ –∏–ª–∏ –£–≥–ª–æ–º–µ—Ä‚Ä≤,–£–≥–ª–æ–º–µ—Ä –∏–ª–∏ –î–∞–ª—å–Ω–æ—Å—Ç—å‚Ä≤,–î–∞–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ –ß–∏—Å–ª–æ–≤–æ–π –∫—É—Ä—Å —Ü–µ–ª–∏\n"
        "üìå –ü—Ä–∏–º–µ—Ä: 112,118 –∏–ª–∏ 0‚Äì54,0‚Äì51 –∏–ª–∏ 3010,2859 –∏–ª–∏ 8\n"
        "üìå –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n"
        "‚Ä¢ –í—ã—Å–æ—Ç–∞ –∏ –í—ã—Å–æ—Ç–∞‚Ä≤ ‚Äî –º–∞–∫—Å–∏–º—É–º 3 —Ü–∏—Ñ—Ä—ã\n"
        "‚Ä¢ –î–∞–ª—å–Ω–æ—Å—Ç—å –∏ –î–∞–ª—å–Ω–æ—Å—Ç—å‚Ä≤ ‚Äî –º–∞–∫—Å–∏–º—É–º 4 —Ü–∏—Ñ—Ä—ã\n"
        "üõ† –ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /skip ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç –∏ —Ä–µ—à–µ–Ω–∏–µ\n"
        "‚Ä¢ /start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n",
        reply_markup=menu_keyboard
    )
    return CHOOSING

async def choose_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    task_text = update.message.text

    if task_text == '–ó–∞–¥–∞—á–∞ 1':
        task = generate_task1()
    elif task_text == '–ó–∞–¥–∞—á–∞ 2':
        task = generate_task2()
    elif task_text == '–ó–∞–¥–∞—á–∞ 3':
        task = generate_task3()
    elif task_text == '–ó–∞–¥–∞—á–∞ 4':
        task = generate_task4()
    else:
        return CHOOSING

    user_state[user_id] = task
    await update.message.reply_text(
        f"üìò –£—Å–ª–æ–≤–∏–µ:\n{task['text']}\n\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –∏–ª–∏ /skip",
        reply_markup=menu_keyboard
    )
    return SOLVING

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    task = user_state.get(user_id)

    if not task:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏. –í–≤–µ–¥–∏—Ç–µ /start")
        return CHOOSING

    answer = update.message.text.strip()

    if answer == '/skip':
        await update.message.reply_text(
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {task['answer']}\n\nüìñ –†–µ—à–µ–Ω–∏–µ:\n{task['solution']}",
            reply_markup=menu_keyboard
        )
        return CHOOSING

    if answer == task['answer']:
        await update.message.reply_text(
            "üéâ –í–µ—Ä–Ω–æ! –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∑–∞–¥–∞—á—É –∏–ª–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.",
            reply_markup=menu_keyboard
        )
        return CHOOSING
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /skip –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏.",
            reply_markup=menu_keyboard
        )
        return SOLVING

async def skip_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    task = user_state.get(user_id)
    if task:
        await update.message.reply_text(
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {task['answer']}\n\nüìñ –†–µ—à–µ–Ω–∏–µ:\n{task['solution']}",
            reply_markup=menu_keyboard
        )
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏.")
    return CHOOSING

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö™ –í—ã—Ö–æ–¥. –î–æ –≤—Å—Ç—Ä–µ—á–∏!")
    return ConversationHandler.END

def main():
    token = os.environ.get("BOT_TOKEN")
    if not token:
        print("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        return

    application = ApplicationBuilder().token(token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSING: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_task)],
            SOLVING: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)]
        },
        fallbacks=[CommandHandler('skip', skip_task), CommandHandler('cancel', cancel)]
    )

    application.add_handler(conv_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    keep_alive()
    main()
