import logging
import random
import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

CHOOSING, SOLVING = range(2)
user_state = {}

menu_keyboard = ReplyKeyboardMarkup(
    [['–ó–∞–¥–∞—á–∞ 1', '–ó–∞–¥–∞—á–∞ 2', '–ó–∞–¥–∞—á–∞ 3', '–ó–∞–¥–∞—á–∞ 4'], ['/skip', '/start']],
    resize_keyboard=True
)

# --- –§–£–ù–ö–¶–ò–ò –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–î–ê–ß ---

def generate_random_u_format():
    format_type = random.choice(['0-x', '0-xx', 'x-xx', 'xx-xx'])
    if format_type == '0-x':
        left = 0
        right = random.randint(1, 9)
    elif format_type == '0-xx':
        left = 0
        right = random.randint(10, 99)
    elif format_type == 'x-xx':
        left = random.randint(1, 9)
        right = random.randint(10, 99)
    else:
        left = random.randint(10, 99)
        right = random.randint(10, 99)
    return f"{left}-{right}", left, right

def parse_u_value(left, right):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º float –±–µ–∑ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
    if left == 0:
        return float(right)
    return float(f"{left}{right:02d}")

def u_number_to_format(n):
    # n - float –∏–ª–∏ int
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É —Ü–µ–ª–æ–π —á–∞—Å—Ç–∏ –±–µ–∑ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
    int_str = str(int(n))
    if len(int_str) <= 2:
        return f"0-{int_str}"
    elif len(int_str) == 3:
        return f"{int_str[0]}-{int_str[1:]}"
    else:
        return f"{int_str[:2]}-{int_str[2:]}"

def cut_digits(number, max_digits):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –Ω–µ –±–æ–ª–µ–µ max_digits —Ü–∏—Ñ—Ä (–±–µ–∑ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è)
    s = str(number).replace('.', '').replace(',', '')
    return s[:max_digits]

def generate_task1():
    D = random.randint(1, 9999)
    U_str, left, right = generate_random_u_format()
    U_value = parse_u_value(left, right)
    V_prime_raw = (D * U_value) / 1000
    V = V_prime_raw * 1.05
    V_prime_out = cut_digits(V_prime_raw, 3)
    V_out = cut_digits(V, 3)
    return {
        'text': f'–î–∞–ª—å–Ω–æ—Å—Ç—å = {D}, –£–≥–ª–æ–º–µ—Ä = {U_str}\n–í–æ–ø—Ä–æ—Å: –í—ã—Å–æ—Ç–∞‚Ä≤ = ?, –í—ã—Å–æ—Ç–∞ = ?',
        'answer': f'{V_prime_out},{V_out}',
        'solution': f'–£–≥–ª–æ–º–µ—Ä = {U_value}\n{D} * {U_value} / 1000 = {V_prime_raw:.9f} ‚Üí –í—ã—Å–æ—Ç–∞‚Ä≤={V_prime_out}\n'
                    f'{V_prime_raw:.9f} * 1.05 = {V:.9f} ‚Üí –í—ã—Å–æ—Ç–∞={V_out}'
    }

def generate_task2():
    format_type = random.choice(['0-xx', 'x-xx', 'xx-xx'])

    if format_type == '0-xx':
        left = 0
        right = random.randint(10, 99)
    elif format_type == 'x-xx':
        left = random.randint(1, 9)
        right = random.randint(10, 99)
    else:
        left = random.randint(10, 99)
        right = random.randint(10, 99)

    U_prime_str = f"{left}-{right}"
    U_prime_value = parse_u_value(left, right)

    # D –æ—Ç 1 –¥–æ 9999
    D = random.randint(1, 9999)

    # –í—ã—Å–æ—Ç–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 10 –¥–æ 500 (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
    V = (U_prime_value * D) / 1000
    if V < 10:
        V = 10
    elif V > 500:
        V = 500

    # –í—ã—Å–æ—Ç–∞ —Ç–µ–ø–µ—Ä—å float, –Ω–µ int
    # –í—ã—á–∏—Å–ª—è–µ–º –£–≥–ª–æ–º–µ—Ä‚Ä≤ –∏ –£–≥–ª–æ–º–µ—Ä –±–µ–∑ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
    U_prime_value_exact = V * 1000 / D  # —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –£–≥–ª–æ–º–µ—Ä–∞'
    U_value_exact = U_prime_value_exact * 0.95  # —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –£–≥–ª–æ–º–µ—Ä–∞

    U_prime_str = u_number_to_format(U_prime_value_exact)
    U_str = u_number_to_format(U_value_exact)

    return {
        'text': f'–î–∞–ª—å–Ω–æ—Å—Ç—å = {D}, –í—ã—Å–æ—Ç–∞ = {V:.6f}\n–í–æ–ø—Ä–æ—Å: –£–≥–ª–æ–º–µ—Ä‚Ä≤ = ?, –£–≥–ª–æ–º–µ—Ä = ?',
        'answer': f'{U_prime_str},{U_str}',
        'solution': f'{V:.6f} * 1000 / {D} = {U_prime_value_exact:.9f} ‚Üí –£–≥–ª–æ–º–µ—Ä‚Ä≤={U_prime_str}\n'
                    f'{U_prime_value_exact:.9f} * 0.95 = {U_value_exact:.9f} ‚Üí –£–≥–ª–æ–º–µ—Ä={U_str}'
    }

def generate_task3():
    V = random.uniform(10, 500)  # –í—ã—Å–æ—Ç–∞ –æ—Ç 10 –¥–æ 500, float –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
    U_str, left, right = generate_random_u_format()
    U_value = parse_u_value(left, right)
    D_prime = (V * 1000) / U_value
    D = D_prime * 0.95
    D_prime_out = cut_digits(D_prime, 4)
    D_out = cut_digits(D, 4)
    return {
        'text': f'–í—ã—Å–æ—Ç–∞ = {V:.6f}, –£–≥–ª–æ–º–µ—Ä = {U_str}\n–í–æ–ø—Ä–æ—Å: –î–∞–ª—å–Ω–æ—Å—Ç—å‚Ä≤ = ?, –î–∞–ª—å–Ω–æ—Å—Ç—å = ?',
        'answer': f'{D_prime_out},{D_out}',
        'solution': f'–£–≥–ª–æ–º–µ—Ä = {U_value}\n{V:.6f} * 1000 / {U_value} = {D_prime:.9f} ‚Üí –î–∞–ª—å–Ω–æ—Å—Ç—å‚Ä≤={D_prime_out}\n'
                    f'{D_prime:.9f} * 0.95 = {D:.9f} ‚Üí –î–∞–ª—å–Ω–æ—Å—Ç—å={D_out}'
    }

def generate_task4():
    azimuth_target = random.randint(1, 359)
    azimuth_reference = random.randint(1, 359)
    numeric_course = azimuth_target - azimuth_reference
    if numeric_course < 0:
        numeric_course += 360
    return {
        'text': f'–ê–∑–∏–º—É—Ç —Ü–µ–ª–∏ = {azimuth_target}, –ê–∑–∏–º—É—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞ = {azimuth_reference}\n–í–æ–ø—Ä–æ—Å: –ß–∏—Å–ª–æ–≤–æ–π –∫—É—Ä—Å —Ü–µ–ª–∏ = ?',
        'answer': f'{numeric_course}',
        'solution': f'{azimuth_target} - {azimuth_reference} = {numeric_course}'
    }

# --- –•–ï–ù–î–õ–ï–†–´ –¢–ï–õ–ï–ì–†–ê–ú ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–Ω—ã—Ö –∑–∞–¥–∞—á.\n\n"
        "–í—ã–±–∏—Ä–∞–π –æ–¥–Ω—É –∏–∑ –∑–∞–¥–∞—á –Ω–∏–∂–µ:\n"
        "üìå –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: –í—ã—Å–æ—Ç–∞‚Ä≤,–í—ã—Å–æ—Ç–∞ –∏–ª–∏ –£–≥–ª–æ–º–µ—Ä‚Ä≤,–£–≥–ª–æ–º–µ—Ä –∏–ª–∏ –î–∞–ª—å–Ω–æ—Å—Ç—å‚Ä≤,–î–∞–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ –ß–∏—Å–ª–æ–≤–æ–π –∫—É—Ä—Å (–¥–ª—è –∑–∞–¥–∞—á–∏ 4)\n"
        "üìå –ü—Ä–∏–º–µ—Ä: 112,118 –∏–ª–∏ 0‚Äì54,0‚Äì51 –∏–ª–∏ 3010,2859 –∏–ª–∏ 8\n"
        "üìå –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n"
        "‚Ä¢ –í—ã—Å–æ—Ç–∞ –∏ –í—ã—Å–æ—Ç–∞‚Ä≤ ‚Äî –º–∞–∫—Å–∏–º—É–º 3 —Ü–∏—Ñ—Ä—ã\n"
        "‚Ä¢ –î–∞–ª—å–Ω–æ—Å—Ç—å –∏ –î–∞–ª—å–Ω–æ—Å—Ç—å‚Ä≤ ‚Äî –º–∞–∫—Å–∏–º—É–º 4 —Ü–∏—Ñ—Ä—ã\n"
        "üõ† –ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /skip ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç –∏ —Ä–µ—à–µ–Ω–∏–µ\n"
        "‚Ä¢ /start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n",
        reply_markup=menu_keyboard
    )
    return CHOOSING

async def choose_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    task_text = update.message.text

    if task_text == '–ó–∞–¥–∞—á–∞ 1':
        task = generate_task1()
    elif task_text == '–ó–∞–¥–∞—á–∞ 2':
        task = generate_task2()
    elif task_text == '–ó–∞–¥–∞—á–∞ 3':
        task = generate_task3()
    elif task_text == '–ó–∞–¥–∞—á–∞ 4':
        task = generate_task4()
    else:
        return CHOOSING

    user_state[user_id] = task
    await update.message.reply_text(
        f"üìò –£—Å–ª–æ–≤–∏–µ:\n{task['text']}\n\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –∏–ª–∏ /skip",
        reply_markup=menu_keyboard
    )
    return SOLVING

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    task = user_state.get(user_id)

    if not task:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏. –í–≤–µ–¥–∏—Ç–µ /start.")
        return CHOOSING

    user_input = update.message.text.replace(" ", "").lower()
    correct = task['answer'].replace(" ", "").lower()

    if user_input == correct:
        await update.message.reply_text("‚úÖ –í–µ—Ä–Ω–æ!")
    else:
        await update.message.reply_text(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ.\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {task['answer']}\n\nüìò –†–µ—à–µ–Ω–∏–µ:\n{task['solution']}"
        )

    await update.message.reply_text("üîÅ –•–æ—Ç–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É? –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ:", reply_markup=menu_keyboard)
    return CHOOSING

async def skip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    task = user_state.get(user_id)
    if task:
        await update.message.reply_text(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {task['answer']}\n\nüìò –†–µ—à–µ–Ω–∏–µ:\n{task['solution']}")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏. –í–≤–µ–¥–∏—Ç–µ /start.")
    await update.message.reply_text("üîÅ –•–æ—Ç–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É? –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ:", reply_markup=menu_keyboard)
    return CHOOSING

def main():
    TOKEN = os.getenv('TOKEN')
    application = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSING: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_task)],
            SOLVING: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer),
                CommandHandler('skip', skip)
            ],
        },
        fallbacks=[CommandHandler('start', start)]
    )
    application.add_handler(conv_handler)

    application.run_polling()

if __name__ == '__main__':
    main()
